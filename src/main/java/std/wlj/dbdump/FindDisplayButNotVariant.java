/**
 * Â© 2018 by Intellectual Reserve, Inc. All rights reserved.
 */
package std.wlj.dbdump;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.*;
import java.util.stream.Collectors;

import org.familysearch.standards.loader.sql.FileResultSet;

/**
 * Find Display names that are NOT variant names for a given place-rep.  This application relies
 * on the "db-dump" files generated by the db-to-solr load process.  Each subdirectory contains
 * files for about 1,000,000 place-reps.
 * 
 * @author wjohnson000
 *
 */
public class FindDisplayButNotVariant {

    private static final String dataDir   = "C:/temp/flat-file/load-test";
    private static final String repFile   = "rep-main.txt";
    private static final String vNameFile = "place-name.txt";
    private static final String dNameFile = "rep-name.txt";

    private static final String DELIMITER = "\\|";

    private static FileResultSet repRS;
    private static FileResultSet vNameRS;
    private static FileResultSet dNameRS;

    private static Map<String, List<String>> varNames  = new HashMap<>();
    private static Map<String, List<String>> dispNames = new HashMap<>();

    public static void main(String...args) throws Exception {
        List<Path> paths = Files.list(Paths.get(dataDir)).filter(Files::isDirectory)
            .collect(Collectors.toList());
        for (Path path : paths) {
            System.out.println("\nPATH: " + path);
            repRS = createFileResultSet(path.toString(), repFile);
            vNameRS = createFileResultSet(path.toString(), vNameFile);
            dNameRS = createFileResultSet(path.toString(), dNameFile);

            if (repRS != null  &&  vNameRS != null  &&  dNameRS != null) {
                readDisplayNames();
                readVariantNames();
                
                String[] repAndPlace = readNextRep();
                while (repAndPlace != null) {
                    boolean isOK = displayAsVariantOK(repAndPlace[0]);
                    if (! isOK) {
                        List<String> vNames = varNames.get(repAndPlace[0]);
                        List<String> dNames = dispNames.get(repAndPlace[0]);

                        System.out.println(" ... " + Arrays.toString(repAndPlace));
                        vNames.forEach(name -> System.out.println("     V." + name));
                        dNames.forEach(name -> System.out.println("     D." + name));
                    }
                    repAndPlace = readNextRep();
                }
            }

            closeFileResultSet(repRS);
            closeFileResultSet(vNameRS);
            closeFileResultSet(dNameRS);
        }
    }

    static String[] readNextRep() throws SQLException {
        if (repRS.next()) {
            String repId = repRS.getString("rep_id");
            String placeId = repRS.getString("owner_id");
            return new String[] { repId, placeId };
        } else {
            return null;
        }
    }

    static void readDisplayNames() throws SQLException {
        while (dNameRS.next()) {
            String repId  = dNameRS.getString("rep_id");
            String locale = dNameRS.getString("locale");
            String text   = dNameRS.getString("text");

            String name = locale + "|" + text;
            List<String> names = dispNames.get(repId);
            if (names == null) {
                names = new ArrayList<>();
                dispNames.put(repId, names);
            }
            names.add(name);
        }

        System.out.println("Display name reading done -- count=" + dispNames.size());
    }

    static void readVariantNames() throws SQLException {
        while (vNameRS.next()) {
            String repId  = vNameRS.getString("rep_id");
            String locale = vNameRS.getString("locale");
            String text   = vNameRS.getString("text");

            String name = locale + "|" + text;
            List<String> names = varNames.get(repId);
            if (names == null) {
                names = new ArrayList<>();
                varNames.put(repId, names);
            }
            names.add(name);
        }

        System.out.println("Variant name reading done -- count=" + varNames.size());
    }

    static boolean displayAsVariantOK(String repId) {
        List<String> vNames = varNames.get(repId);
        List<String> dNames = dispNames.get(repId);

        if ("11".equals(repId)) {
            System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
            vNames.forEach(nn -> System.out.println("   VV >>" + nn + "<<"));
            dNames.forEach(nn -> System.out.println("   DD >>" + nn + "<<"));
        }

        Set<String> blah = new HashSet<>(dNames);
        blah.removeAll(vNames);

        return blah.isEmpty();
    }

    static FileResultSet createFileResultSet(String baseDir, String filename) throws SQLException {
        File aFile = new File(baseDir, filename);
        if (! aFile.exists()) {
            return null;
        } else {
            FileResultSet tempRS = new FileResultSet();
            tempRS.setSeparator(DELIMITER);
            tempRS.openFile(aFile);
            
            return tempRS;
        }
    }

    static void closeFileResultSet(FileResultSet frs) {
        if (frs != null) {
            frs.close();
        }
    }
}
